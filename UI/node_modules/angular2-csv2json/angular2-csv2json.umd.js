(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common'], factory) :
	(factory((global['angular2-csv2json'] = {}),global.core,global.common));
}(this, (function (exports,core,common) { 'use strict';

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Csv2JsonComponent = (function () {
    function Csv2JsonComponent() {
        this.response = new core.EventEmitter();
        this.btnText = 'Upload';
        this.errorMsg = 'Invalid format. Please upload only csv files..';
        this.allowedFormat = [
            'text/csv',
            'application/vnd.ms-excel'
        ];
    }
    /**
     * @param {?} e
     * @return {?}
     */
    Csv2JsonComponent.prototype.getFiles = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        return __awaiter(this, void 0, void 0, function () {
            var file, formatted, _a, headers, data, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        file = e.target.files[0];
                        if (!this.allowedFormat.includes(file.type)) {
                            this.file.nativeElement.value = '';
                            this.response.emit({ type: 'error', data: this.errorMsg });
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.readerResultOptimized(file)];
                    case 1:
                        formatted = _b.sent();
                        _a = this.formatCSVData(formatted.result.split(/\r?\n|\r/)), headers = _a[0], data = _a.slice(1);
                        this.arrayToObject(data, headers);
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _b.sent();
                        this.file.nativeElement.value = '';
                        this.response.emit({ type: 'success', data: [] });
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @param {?} file
     * @return {?}
     */
    Csv2JsonComponent.prototype.readerResultOptimized = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        return new Promise(function (resolve, reject) {
            var /** @type {?} */ reader = new FileReader();
            reader.onload = function () {
                var /** @type {?} */ datas = reader.result;
                if (datas) {
                    resolve({ result: datas });
                }
                else {
                    reject('No data found');
                }
            };
            reader.readAsBinaryString(file);
        });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    Csv2JsonComponent.prototype.formatCSVData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return data.map(function (text) {
            var /** @type {?} */ re_valid = /^\s*(?:'[^'\\]*(?:\\[\S\s][^'\\]*)*'|"[^"\\]*(?:\\[\S\s][^"\\]*)*"|[^,'"\s\\]*(?:\s+[^,'"\s\\]+)*)\s*(?:,\s*(?:'[^'\\]*(?:\\[\S\s][^'\\]*)*'|"[^"\\]*(?:\\[\S\s][^"\\]*)*"|[^,'"\s\\]*(?:\s+[^,'"\s\\]+)*)\s*)*$/;
            var /** @type {?} */ re_value = /(?!\s*$)\s*(?:'([^'\\]*(?:\\[\S\s][^'\\]*)*)'|"([^"\\]*(?:\\[\S\s][^"\\]*)*)"|([^,'"\s\\]*(?:\s+[^,'"\s\\]+)*))\s*(?:,|$)/g;
            if (!re_valid.test(text))
                return null;
            var /** @type {?} */ a = [];
            text.replace(re_value, function (m0, m1, m2, m3) {
                if (m1 !== undefined)
                    a.push(m1.replace(/\\'/g, "'"));
                else if (m2 !== undefined)
                    a.push(m2.replace(/\\"/g, '"'));
                else if (m3 !== undefined)
                    a.push(m3);
                return '';
            });
            if (/,\s*$/.test(text))
                a.push('');
            return a;
        });
    };
    /**
     * @param {?} data
     * @param {?} headers
     * @return {?}
     */
    Csv2JsonComponent.prototype.arrayToObject = /**
     * @param {?} data
     * @param {?} headers
     * @return {?}
     */
    function (data, headers) {
        return __awaiter(this, void 0, void 0, function () {
            var obj;
            return __generator(this, function (_a) {
                obj = [];
                data.map(function (d) {
                    var /** @type {?} */ o = {};
                    for (var /** @type {?} */ j = 0; j < headers.length; j++) {
                        o[headers[j]] = d[j];
                    }
                    o = JSON.parse(JSON.stringify(o, function (key, value) { return (!value ? '' : value); }));
                    obj.push(o);
                });
                this.file.nativeElement.value = '';
                this.response.emit({ type: 'success', data: obj });
                return [2 /*return*/];
            });
        });
    };
    Csv2JsonComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'csv2json',
                    template: "<p> <button type=\"button\" class=\"btn\" (click)=\"file.click()\"> {{ btnText }} </button> <input type=\"file\" name=\"file\" #file [hidden]=\"true\" (change)=\"getFiles($event)\" /> </p> ",
                    styles: [".btn { border-radius: 12px; padding: 10px; width: 120px; background-color: #3880ff; color: #fff; font-weight: bold; }"]
                },] },
    ];
    /** @nocollapse */
    Csv2JsonComponent.ctorParameters = function () { return []; };
    Csv2JsonComponent.propDecorators = {
        "file": [{ type: core.ViewChild, args: ['file',] },],
        "btnText": [{ type: core.Input },],
        "errorMsg": [{ type: core.Input },],
        "response": [{ type: core.Output },],
    };
    return Csv2JsonComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var CSV2JSONModule = (function () {
    function CSV2JSONModule() {
    }
    /**
     * @return {?}
     */
    CSV2JSONModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: CSV2JSONModule
        };
    };
    CSV2JSONModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        Csv2JsonComponent,
                    ],
                    exports: [
                        Csv2JsonComponent,
                    ]
                },] },
    ];
    return CSV2JSONModule;
}());

exports.CSV2JSONModule = CSV2JSONModule;
exports.Csv2JsonComponent = Csv2JsonComponent;

Object.defineProperty(exports, '__esModule', { value: true });

})));
